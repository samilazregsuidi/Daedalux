#ifndef VARIABLE_H
#define VARIABLE_H

#include <string>
#include <list>
#include <map>

typedef char byte;
typedef unsigned char ubyte;

class payload;

#include "symbols.hpp"

class varSymNode;

class expr;
class exprArgList;
class exprRArgList;

class channel;

class variable {
public:

	// Primitive types:
	enum Type {
		V_NA,
		V_BIT,
		V_BOOL,
		V_BYTE,
		V_PID,
		V_SHORT,
		V_INT,
		V_UNSGN, 	// not supported yet
		V_MTYPE,
		V_CLOCK ,	// dense time clock
		V_MTYPE_DEF,
		V_CMTYPE,

		//V_FEAT,
		//V_UFEAT,

		// "Special" types:
		V_CHAN,		// Channel: capacity used; children denote message fields
		V_CID,		// Channel reference; capacity and children are not used.
		V_TDEF,		// Type definition: children denote fields of type
		V_INIT,
		V_PROC,		// ProcType: fsm field used; bound denotes the number of initially active processes
		V_INLINE,
		V_UTYPE,	// Type of variable is a user type (basically, a T_TDEF record is being used as the type): utype points to the type record
		V_NEVER,	// Never claim

		V_VARIANT,

		V_STATE,
		V_COMP_STATE
	};

	virtual variable* deepCopy(void) const = 0;

	virtual ~variable();

	/****************************************************/

	virtual void init(void) = 0;

	/*virtual void setValue(int value) = 0;
	
	virtual int getValue(void) const = 0;

	virtual int operator = (const variable& rvalue) = 0;

	virtual int operator ++ (void) = 0;

	virtual int operator -- (void) = 0;

	virtual int operator ++ (int) = 0;

	virtual int operator -- (int) = 0;

	virtual bool operator == (const variable& other) const = 0;

	virtual bool operator != (const variable& other) const = 0;*/

	/****************************************************/

	virtual std::string getFullName(void) const = 0;

	virtual std::string getLocalName(void) const = 0;

	virtual variable::Type getType(void) const = 0;

	virtual bool isGlobal(void) const = 0;

	virtual void assign(const variable* sc) = 0;

	virtual void setParent(variable* parent) = 0;

	virtual variable* getParent(void) const = 0;

	virtual unsigned int getVariableId(void) const = 0;

	/**********************************************************/

	virtual void print(void) const = 0;

	virtual void printTexada(void) const = 0;

	virtual void printHexadecimal(void) const = 0;

	/************************************************************/

	virtual size_t getSizeOf(void) const = 0;

	virtual size_t getOffset(void) const = 0;

	virtual size_t getEndOffset(void) const = 0;

	virtual void setPayload(payload* payLoad) = 0;
	
	virtual payload* getPayload(void) const = 0;

	/************************************************************/

	virtual void addRawBytes(size_t size) = 0;

	virtual void addField(const std::string& name, variable* var) = 0;

	virtual void _addVariable(variable* subVar) = 0;

	virtual void _rmVariable(const variable* var) = 0;

	virtual bool hasVariables(void) const = 0;

	virtual std::list<variable*> getVariables(void) const = 0;

	virtual channel* getChannel(const std::string& name) const = 0;

	virtual void clearVariables(void) = 0;

	//std::list<variable*> addVariables(const varSymNode* sym);

	//std::list<variable*> createVariables(const varSymNode* sym);

	//variable* addVariable(const varSymNode* varSym);

	virtual variable* getVariable(const std::string& name) const = 0;

	virtual std::map<std::string, variable*> getVariablesMap(void) const = 0;


	virtual unsigned long hash(void) const = 0;

	/*********************************************************/

	static Type getVarType(symbol::Type type);

	static unsigned int vidCounter;
};

#endif